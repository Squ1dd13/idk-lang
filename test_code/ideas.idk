/****** Enums with arbitrary value types ******/

// With a 'Pair' or 'Tuple' type (likely in 'core'),
//  this could be used to have more than one value per name.
enum SomeEnum of String {
    coolThingOne = "yeah",
    coolThingTwo = "another yeah",
    coolThingThree = "and so on"
}

/****** 'flags' for automatic flag enum values ******/
// 'of' would be illegal here, since flags should always
//  be 'int'.
flags SomeFlags {
    flagOne,
    flagTwo,
    flagThree
}

// This would be equivalent to the following:
enum SomeFlags {
    flagOne = 1 << 0,
    flagTwo = 1 << 1,
    flagThree = 1 << 2
}

/****** Scoped parameters ******/
proc doSomething(SomeEnum thing in SomeEnum) {
    // Use 'thing' for stuff.
}

// The expression passed as 'thing' is evaluated in the scope
//  of SomeEnum, so we don't have to type SomeEnum.coolThingOne.
// This should work for any static scope.
doSomething(coolThingOne);

// We can also do this, if we want to type the full thing:
doSomething(SomeEnum.coolThingOne);

/****** 'finally' keyword equivalent to Go's 'defer' ******/
// I think 'finally' is clearer than 'defer', even though both are
//  completely valid. Also, 'finally' reads well for short statements.

proc someProcedure() {
    // Single statement.
    finally print("Something");

    // Block. This and the short form above could be
    //  handled in the same way if '{}' groups are parsed
    //  as statements (which they should be).
    finally {
        int number = calculateSomething();

        if number == 10 {
            print("Number is 10!");
        } else {
            print("Number is not 10!");
        }
    }
}


/****** 'check..when' for switches ******/
String doCheck(int number) {
    check number {
        when 1 {
            return "Your number is 1";
        }

        when 2, 3, 4 {
            return "Your number is 2, 3 or 4.";
        }

        other {
            return "Your number is not 1, 2, 3 or 4.";
        }
    }

    return "How did we get here?";
}

/****** Two cast operators: 'to' for conversions and 'as' for reinterpreting ******/
class SomeClass {
    String operator to() {
        return "Instance of SomeClass";
    }
}

let instance = SomeClass();

// Could be anything - we have no control here.
let reinterpreted = instance as String;

// Uses the 'to' operator for String that we defined earlier, so
//  we are in control.
let converted = instance to String;

/****** Some sort of compact initialiser ******/
class Something {
    int a = 1;
    int b = 0;
    int c = 2;
}

let something = Something {
    a = 1,
    b = 2,
    c = 3
};

/****** Models, of which a class (or another model) may fit multiple ******/
// This multiple inheritance of models should make up for the lack of multiple inheritance
//  of classes.

model Stringable {
    String toString();
}

model Inspectable {
    InspectionData inspect();
}

model Debuggable fits Stringable, Inspectable {
    // Debuggable inherits from Stringable and Inspectable, so anything
    //  which fits Debuggable must also fit Stringable and Inspectable.
    //
    // Define some other things...
    //
}

class DebugObject fits Debuggable {
    String toString() {
        return "something useful";
    }

    InspectionData inspect() {
        return InspectionData:fromString(toString());
    }

    InspectionData inspectSomethingElse(Inspectable other) {
        return other.inspect();
    }
}